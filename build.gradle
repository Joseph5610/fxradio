buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
}

apply plugin: 'javafx-gradle-plugin'

version "0.2.1"

compileKotlin {
    kotlinOptions.jvmTarget = 1.8
}

compileTestKotlin {
    kotlinOptions.jvmTarget = 1.8
}

ext.versions = [
        'kotlin'              : '1.3.0',
        'kotlin-coroutines'   : '1.3.4',
        'tornadofx'           : '1.7.20',
        'controlsfx'          : '8.40.17',
        'tornadofx-controlsfx': '0.1.1',
        'retrofit'            : '2.8.1',
        'retrofit-adapters'   : '2.3.0',
        'kotlin-logging'      : '1.7.9',
        'slf4j'               : '1.7.5',
        'log4j2'              : '2.9.1',
        'commons-io'          : '2.6',
        'rxkotlinfx'          : '2.2.2',
        'humble'              : '0.3.0',
        'vlcj'                : '4.4.0',
        'sqlite-jdbc'         : '3.21.0.1',
        'rxkotlin-jdbc'       : '0.4.1',
        'nsmenufx'            : '2.1.7',
        'semver'              : '3.1.0',
        'testfx'              : '4.0.16-alpha',
        'junit'               : '5.3.1'
]

dependencies {
    // Align versions of all Kotlin components
    compile platform('org.jetbrains.kotlin:kotlin-bom')

    //local jars
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Use the Kotlin JDK 8 standard library.
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    runtime group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: versions["kotlin"]
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions["kotlin-coroutines"]}"

    compile "no.tornado:tornadofx:${versions["tornadofx"]}"
    compile "org.controlsfx:controlsfx:${versions["controlsfx"]}"
    compile "no.tornado:tornadofx-controlsfx:${versions["tornadofx-controlsfx"]}"

    compile "com.squareup.retrofit2:retrofit:${versions["retrofit"]}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${versions["retrofit-adapters"]}"
    compile "com.squareup.retrofit2:converter-gson:${versions["retrofit-adapters"]}"

    compile "io.github.microutils:kotlin-logging:${versions["kotlin-logging"]}"
    compile "org.slf4j:slf4j-api:${versions["slf4j"]}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${versions["log4j2"]}"
    compile "org.apache.logging.log4j:log4j-api:${versions["log4j2"]}"
    compile "org.apache.logging.log4j:log4j-core:${versions["log4j2"]}"

    compile "commons-io:commons-io:${versions["commons-io"]}"

    compile "com.github.thomasnield:rxkotlinfx:${versions["rxkotlinfx"]}"

    compile "org.xerial:sqlite-jdbc:${versions["sqlite-jdbc"]}"
    compile "org.nield:rxkotlin-jdbc:${versions["rxkotlin-jdbc"]}"
    compile "de.codecentric.centerdevice:centerdevice-nsmenufx:${versions["nsmenufx"]}"
    compile "com.vdurmont:semver4j:${versions["semver"]}"

    //Players
    compile "io.humble:humble-video-all:${versions["humble"]}"
    compile "uk.co.caprica:vlcj:${versions["vlcj"]}"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions["junit"]}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${versions["junit"]}"
    testCompile "org.testfx:testfx-core:${versions["testfx"]}"
    testCompile "org.testfx:testfx-junit5:${versions["testfx"]}"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

/*
jfxJar {
    dependsOn test
}
*/

jfx {
    HashMap<String, String> attributes = new HashMap<String, String>()
    attributes.put('Implementation-Version', version.toString())
    verbose = true
    appName = "FXRadio"
    // minimal requirement for jfxJar-task
    manifestAttributes = attributes
    mainClass = 'online.hudacek.fxradio.FxRadioKt'

    // minimal requirement for jfxNative-task
    identifier = "FXRadio"
    vendor = 'FXRadio'
    jfxMainAppJarName = "fxRadio.jar"
    deployDir = "src/main/deploy"
    nativeOutputDir = "build/jfx/native"
    nativeReleaseVersion = version
    needShortcut = true

    additionalAppResources = 'src/main/deploy/additional'
    bundleArguments = [
            licenseType: 'ASL 2.0',
            licenseFile: 'LICENSE'
    ]
}

test {
    useJUnitPlatform()
}