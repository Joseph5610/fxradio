buildscript {
    dependencies {
        classpath 'de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
}

apply plugin: 'javafx-gradle-plugin'

version "0.9.3"

ext.versions = [
        kotlin             : "1.4.32",
        kotlinCoroutines   : "1.3.4",
        tornadofx          : "1.7.20",
        controlsfx         : "8.40.18",
        tornadofxControlsfx: "0.1.1",
        kotlinLogging      : "1.12.5",
        slf4j              : "1.7.36",
        log4j2             : "2.17.2",
        commonsio          : "2.11.0",
        rxkotlinfx         : "2.2.2",
        humble             : "0.3.0",
        vlcj               : "4.7.2",
        sqliteJdbc         : "3.36.0.3",
        rxkotlinJdbc       : "0.4.1",
        nsmenufx           : "2.1.7",
        semver             : "3.1.0",
        testfx             : "4.0.16-alpha",
        junit              : "5.8.2",
        flyway             : "8.5.10"
]

allprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        // Align versions of all Kotlin components
        compile platform('org.jetbrains.kotlin:kotlin-bom')

        // Use the Kotlin JDK 8 standard library
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile("org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin")
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinCoroutines")

        compile("io.github.microutils:kotlin-logging:$versions.kotlinLogging")
        compile("org.slf4j:slf4j-api:$versions.slf4j")
        compile("org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j2")
        compile("org.apache.logging.log4j:log4j-api:$versions.log4j2")
        compile("org.apache.logging.log4j:log4j-core:$versions.log4j2")
    }
}


compileKotlin {
    kotlinOptions.jvmTarget = 1.8
}

compileTestKotlin {
    kotlinOptions.jvmTarget = 1.8
}

dependencies {
    compile project(':api-client')

    // Local JAR files
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile("no.tornado:tornadofx:$versions.tornadofx")
    compile("org.controlsfx:controlsfx:$versions.controlsfx")
    compile("no.tornado:tornadofx-controlsfx:$versions.tornadofxControlsfx")

    compile("commons-io:commons-io:$versions.commonsio")

    compile("com.github.thomasnield:rxkotlinfx:$versions.rxkotlinfx")
    compile("org.xerial:sqlite-jdbc:$versions.sqliteJdbc")
    compile("org.nield:rxkotlin-jdbc:$versions.rxkotlinJdbc")
    compile("de.codecentric.centerdevice:centerdevice-nsmenufx:$versions.nsmenufx")
    compile("org.flywaydb:flyway-core:$versions.flyway")

    //Players
    compile("io.humble:humble-video-all:$versions.humble")
    compile("uk.co.caprica:vlcj:$versions.vlcj")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$versions.junit")
    testCompile("org.junit.jupiter:junit-jupiter-api:$versions.junit")
    testCompile("org.junit.jupiter:junit-jupiter-params:$versions.junit")
    testCompile("org.testfx:testfx-core:$versions.testfx")
    testCompile("org.testfx:testfx-junit5:$versions.testfx")
    testCompile("org.testfx:openjfx-monocle:8u76-b04")
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
}

test {
    useJUnitPlatform()
}

jfx {
    HashMap<String, String> attributes = new HashMap<String, String>()
    attributes.put('Implementation-Version', version.toString())
    verbose = true
    appName = "FXRadio"
    // minimal requirement for jfxJar-task
    manifestAttributes = attributes
    mainClass = 'online.hudacek.fxradio.FxRadioKt'

    // minimal requirement for jfxNative-task
    identifier = "FXRadio"
    vendor = 'FXRadio'
    jfxMainAppJarName = "fxRadio.jar"
    deployDir = "src/main/deploy"
    nativeOutputDir = "build/jfx/native"
    nativeReleaseVersion = version
    needShortcut = true
    bundler = "ALL"

    additionalAppResources = 'src/main/deploy/additional'
    String runtimePath = System.getenv('JAVA_HOME')
    if (runtimePath != null && System.getenv('FX_APPEND_PATH') != null) {
        runtimePath = runtimePath + System.getenv('FX_APPEND_PATH')
    }
    logger.info('Runtime path is: {}', runtimePath)
    bundleArguments = [
            licenseType: 'AGPLv3',
            licenseFile: 'LICENSE', //,
            runtime    : runtimePath
            //'signBundle': true,
            //'mac.signing-key-developer-id-app': 'Developer ID Application: XYZ'
    ]
}